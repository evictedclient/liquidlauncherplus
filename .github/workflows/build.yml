name: Build
on:
  push:
    branches:
      - tauri/v2

jobs:
  build-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: macos-latest
            args: >-
              --target aarch64-apple-darwin
          - platform: macos-latest
            args: >-
              --target x86_64-apple-darwin
          - platform: ubuntu-22.04
            args: >-

          - platform: windows-latest
            args: >-
    

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: 21

      - name: install Rust nightly
        uses: dtolnay/rust-toolchain@nightly
        with:
          targets: >-
            ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf libx11-dev xorg-dev libglu1-mesa-dev libglib2.0-0

      - name: Setup Cargo dependency cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: shared

      - name: install app dependencies and build it
        run: |
          yarn && yarn build

      - name: Build and release
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          args: >-
            ${{ matrix.args }}
          tagName: >-
            ${{ startsWith(github.event.head_commit.message, 'release: ') && 'v__VERSION__' || format('v__VERSION__-{0}', github.sha) }}
          releaseName: >-
            ${{ startsWith(github.event.head_commit.message, 'release: ') && 'Release v__VERSION__' || format('Development build - {0}', github.sha) }}
          releaseBody: >-
            ${{ startsWith(github.event.head_commit.message, 'release: ') && 'See the assets to download and install this version.' || format('Development build from commit {0}

            This is an automated build from the latest commit. It may be unstable.

            Commit message: {1}', github.sha, github.event.head_commit.message) }}
          releaseDraft: >-
            ${{ startsWith(github.event.head_commit.message, 'release: ') }}
          prerelease: >-
            ${{ !startsWith(github.event.head_commit.message, 'release: ') }}